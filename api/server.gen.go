// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/Taraxa-project/taraxa-indexer/models"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns all DAG blocks
	// (GET /address/{address}/dags)
	GetAddressDags(ctx echo.Context, address AddressParam, params GetAddressDagsParams) error
	// Returns all PBFT blocks
	// (GET /address/{address}/pbfts)
	GetAddressPbfts(ctx echo.Context, address AddressParam, params GetAddressPbftsParams) error
	// Returns stats for the address
	// (GET /address/{address}/stats)
	GetAddressStats(ctx echo.Context, address AddressParam) error
	// Returns all transactions
	// (GET /address/{address}/transactions)
	GetAddressTransactions(ctx echo.Context, address AddressParam, params GetAddressTransactionsParams) error
	// Returns yield for the address
	// (GET /address/{address}/yield)
	GetAddressYield(ctx echo.Context, address AddressParam, params GetAddressYieldParams) error
	// Returns yield for the address
	// (GET /address/{address}/yieldForInterval)
	GetAddressYieldForInterval(ctx echo.Context, address AddressParam, params GetAddressYieldForIntervalParams) error
	// Returns chain stats
	// (GET /chainStats)
	GetChainStats(ctx echo.Context) error
	// Returns the list of TARA token holders and their balances
	// (GET /holders)
	GetHolders(ctx echo.Context, params GetHoldersParams) error
	// Returns the number of active addresses for the selected month
	// (GET /monthlyActiveAddresses)
	GetMonthlyActiveAddresses(ctx echo.Context, params GetMonthlyActiveAddressesParams) error
	// Returns the number of active addresses for the selected month
	// (GET /monthlyStats)
	GetMonthlyStats(ctx echo.Context, params GetMonthlyStatsParams) error
	// Returns total supply
	// (GET /totalSupply)
	GetTotalSupply(ctx echo.Context) error
	// Returns total yield
	// (GET /totalYield)
	GetTotalYield(ctx echo.Context, params GetTotalYieldParams) error
	// Returns the decoded transaction
	// (GET /transaction/{hash})
	GetTransaction(ctx echo.Context, hash HashParam) error
	// Returns internal transactions
	// (GET /transaction/{hash}/internal_transactions)
	GetInternalTransactions(ctx echo.Context, hash HashParam) error
	// Returns event logs of transaction
	// (GET /transaction/{hash}/logs)
	GetTransactionLogs(ctx echo.Context, hash HashParam) error
	// Returns all validators
	// (GET /validators)
	GetValidators(ctx echo.Context, params GetValidatorsParams) error
	// Returns total number of PBFT blocks
	// (GET /validators/total)
	GetValidatorsTotal(ctx echo.Context, params GetValidatorsTotalParams) error
	// Returns info about the validator
	// (GET /validators/{address})
	GetValidator(ctx echo.Context, address AddressParam, params GetValidatorParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetAddressDags converts echo context to params.
func (w *ServerInterfaceWrapper) GetAddressDags(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address AddressParam

	err = runtime.BindStyledParameterWithOptions("simple", "address", ctx.Param("address"), &address, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAddressDagsParams
	// ------------- Required query parameter "pagination" -------------

	err = runtime.BindQueryParameter("form", true, true, "pagination", ctx.QueryParams(), &params.Pagination)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pagination: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAddressDags(ctx, address, params)
	return err
}

// GetAddressPbfts converts echo context to params.
func (w *ServerInterfaceWrapper) GetAddressPbfts(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address AddressParam

	err = runtime.BindStyledParameterWithOptions("simple", "address", ctx.Param("address"), &address, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAddressPbftsParams
	// ------------- Required query parameter "pagination" -------------

	err = runtime.BindQueryParameter("form", true, true, "pagination", ctx.QueryParams(), &params.Pagination)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pagination: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAddressPbfts(ctx, address, params)
	return err
}

// GetAddressStats converts echo context to params.
func (w *ServerInterfaceWrapper) GetAddressStats(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address AddressParam

	err = runtime.BindStyledParameterWithOptions("simple", "address", ctx.Param("address"), &address, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAddressStats(ctx, address)
	return err
}

// GetAddressTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetAddressTransactions(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address AddressParam

	err = runtime.BindStyledParameterWithOptions("simple", "address", ctx.Param("address"), &address, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAddressTransactionsParams
	// ------------- Required query parameter "pagination" -------------

	err = runtime.BindQueryParameter("form", true, true, "pagination", ctx.QueryParams(), &params.Pagination)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pagination: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAddressTransactions(ctx, address, params)
	return err
}

// GetAddressYield converts echo context to params.
func (w *ServerInterfaceWrapper) GetAddressYield(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address AddressParam

	err = runtime.BindStyledParameterWithOptions("simple", "address", ctx.Param("address"), &address, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAddressYieldParams
	// ------------- Optional query parameter "blockNumber" -------------

	err = runtime.BindQueryParameter("form", true, false, "blockNumber", ctx.QueryParams(), &params.BlockNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter blockNumber: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAddressYield(ctx, address, params)
	return err
}

// GetAddressYieldForInterval converts echo context to params.
func (w *ServerInterfaceWrapper) GetAddressYieldForInterval(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address AddressParam

	err = runtime.BindStyledParameterWithOptions("simple", "address", ctx.Param("address"), &address, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAddressYieldForIntervalParams
	// ------------- Optional query parameter "fromBlock" -------------

	err = runtime.BindQueryParameter("form", true, false, "fromBlock", ctx.QueryParams(), &params.FromBlock)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fromBlock: %s", err))
	}

	// ------------- Required query parameter "toBlock" -------------

	err = runtime.BindQueryParameter("form", true, true, "toBlock", ctx.QueryParams(), &params.ToBlock)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter toBlock: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAddressYieldForInterval(ctx, address, params)
	return err
}

// GetChainStats converts echo context to params.
func (w *ServerInterfaceWrapper) GetChainStats(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetChainStats(ctx)
	return err
}

// GetHolders converts echo context to params.
func (w *ServerInterfaceWrapper) GetHolders(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetHoldersParams
	// ------------- Required query parameter "pagination" -------------

	err = runtime.BindQueryParameter("form", true, true, "pagination", ctx.QueryParams(), &params.Pagination)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pagination: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetHolders(ctx, params)
	return err
}

// GetMonthlyActiveAddresses converts echo context to params.
func (w *ServerInterfaceWrapper) GetMonthlyActiveAddresses(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetMonthlyActiveAddressesParams
	// ------------- Optional query parameter "date" -------------

	err = runtime.BindQueryParameter("form", true, false, "date", ctx.QueryParams(), &params.Date)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter date: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetMonthlyActiveAddresses(ctx, params)
	return err
}

// GetMonthlyStats converts echo context to params.
func (w *ServerInterfaceWrapper) GetMonthlyStats(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetMonthlyStatsParams
	// ------------- Optional query parameter "date" -------------

	err = runtime.BindQueryParameter("form", true, false, "date", ctx.QueryParams(), &params.Date)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter date: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetMonthlyStats(ctx, params)
	return err
}

// GetTotalSupply converts echo context to params.
func (w *ServerInterfaceWrapper) GetTotalSupply(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTotalSupply(ctx)
	return err
}

// GetTotalYield converts echo context to params.
func (w *ServerInterfaceWrapper) GetTotalYield(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTotalYieldParams
	// ------------- Optional query parameter "blockNumber" -------------

	err = runtime.BindQueryParameter("form", true, false, "blockNumber", ctx.QueryParams(), &params.BlockNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter blockNumber: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTotalYield(ctx, params)
	return err
}

// GetTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransaction(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "hash" -------------
	var hash HashParam

	err = runtime.BindStyledParameterWithOptions("simple", "hash", ctx.Param("hash"), &hash, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hash: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTransaction(ctx, hash)
	return err
}

// GetInternalTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetInternalTransactions(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "hash" -------------
	var hash HashParam

	err = runtime.BindStyledParameterWithOptions("simple", "hash", ctx.Param("hash"), &hash, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hash: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetInternalTransactions(ctx, hash)
	return err
}

// GetTransactionLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransactionLogs(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "hash" -------------
	var hash HashParam

	err = runtime.BindStyledParameterWithOptions("simple", "hash", ctx.Param("hash"), &hash, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hash: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTransactionLogs(ctx, hash)
	return err
}

// GetValidators converts echo context to params.
func (w *ServerInterfaceWrapper) GetValidators(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetValidatorsParams
	// ------------- Optional query parameter "week" -------------

	err = runtime.BindQueryParameter("form", true, false, "week", ctx.QueryParams(), &params.Week)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter week: %s", err))
	}

	// ------------- Required query parameter "pagination" -------------

	err = runtime.BindQueryParameter("form", true, true, "pagination", ctx.QueryParams(), &params.Pagination)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pagination: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetValidators(ctx, params)
	return err
}

// GetValidatorsTotal converts echo context to params.
func (w *ServerInterfaceWrapper) GetValidatorsTotal(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetValidatorsTotalParams
	// ------------- Optional query parameter "week" -------------

	err = runtime.BindQueryParameter("form", true, false, "week", ctx.QueryParams(), &params.Week)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter week: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetValidatorsTotal(ctx, params)
	return err
}

// GetValidator converts echo context to params.
func (w *ServerInterfaceWrapper) GetValidator(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address AddressParam

	err = runtime.BindStyledParameterWithOptions("simple", "address", ctx.Param("address"), &address, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetValidatorParams
	// ------------- Optional query parameter "week" -------------

	err = runtime.BindQueryParameter("form", true, false, "week", ctx.QueryParams(), &params.Week)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter week: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetValidator(ctx, address, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/address/:address/dags", wrapper.GetAddressDags)
	router.GET(baseURL+"/address/:address/pbfts", wrapper.GetAddressPbfts)
	router.GET(baseURL+"/address/:address/stats", wrapper.GetAddressStats)
	router.GET(baseURL+"/address/:address/transactions", wrapper.GetAddressTransactions)
	router.GET(baseURL+"/address/:address/yield", wrapper.GetAddressYield)
	router.GET(baseURL+"/address/:address/yieldForInterval", wrapper.GetAddressYieldForInterval)
	router.GET(baseURL+"/chainStats", wrapper.GetChainStats)
	router.GET(baseURL+"/holders", wrapper.GetHolders)
	router.GET(baseURL+"/monthlyActiveAddresses", wrapper.GetMonthlyActiveAddresses)
	router.GET(baseURL+"/monthlyStats", wrapper.GetMonthlyStats)
	router.GET(baseURL+"/totalSupply", wrapper.GetTotalSupply)
	router.GET(baseURL+"/totalYield", wrapper.GetTotalYield)
	router.GET(baseURL+"/transaction/:hash", wrapper.GetTransaction)
	router.GET(baseURL+"/transaction/:hash/internal_transactions", wrapper.GetInternalTransactions)
	router.GET(baseURL+"/transaction/:hash/logs", wrapper.GetTransactionLogs)
	router.GET(baseURL+"/validators", wrapper.GetValidators)
	router.GET(baseURL+"/validators/total", wrapper.GetValidatorsTotal)
	router.GET(baseURL+"/validators/:address", wrapper.GetValidator)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
