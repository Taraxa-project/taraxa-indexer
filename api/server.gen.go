// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/Taraxa-project/taraxa-indexer/models"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns all DAG blocks
	// (GET /address/{address}/dags)
	GetAddressDags(ctx echo.Context, address AddressParam, params GetAddressDagsParams) error
	// Returns all PBFT blocks
	// (GET /address/{address}/pbfts)
	GetAddressPbfts(ctx echo.Context, address AddressParam, params GetAddressPbftsParams) error
	// Returns stats for the address
	// (GET /address/{address}/stats)
	GetAddressStats(ctx echo.Context, address AddressParam) error
	// Returns all transactions
	// (GET /address/{address}/transactions)
	GetAddressTransactions(ctx echo.Context, address AddressParam, params GetAddressTransactionsParams) error
	// Returns yield for the address
	// (GET /address/{address}/yield)
	GetAddressYield(ctx echo.Context, address AddressParam, params GetAddressYieldParams) error
	// Returns the list of TARA token holders and their balances
	// (GET /holders)
	GetHolders(ctx echo.Context, params GetHoldersParams) error
	// Returns total supply
	// (GET /totalSupply)
	GetTotalSupply(ctx echo.Context) error
	// Returns total yield
	// (GET /totalYield)
	GetTotalYield(ctx echo.Context, params GetTotalYieldParams) error
	// Returns the decoded transaction
	// (GET /transaction/{hash})
	GetTransaction(ctx echo.Context, hash HashParam) error
	// Returns internal transactions
	// (GET /transaction/{hash}/internal_transactions)
	GetInternalTransactions(ctx echo.Context, hash HashParam) error
	// Returns event logs of transaction
	// (GET /transaction/{hash}/logs)
	GetTransactionLogs(ctx echo.Context, hash HashParam) error
	// Returns all validators
	// (GET /validators)
	GetValidators(ctx echo.Context, params GetValidatorsParams) error
	// Returns total number of PBFT blocks
	// (GET /validators/total)
	GetValidatorsTotal(ctx echo.Context, params GetValidatorsTotalParams) error
	// Returns info about the validator
	// (GET /validators/{address})
	GetValidator(ctx echo.Context, address AddressParam, params GetValidatorParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetAddressDags converts echo context to params.
func (w *ServerInterfaceWrapper) GetAddressDags(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address AddressParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAddressDagsParams
	// ------------- Required query parameter "pagination" -------------

	err = runtime.BindQueryParameter("form", true, true, "pagination", ctx.QueryParams(), &params.Pagination)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pagination: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAddressDags(ctx, address, params)
	return err
}

// GetAddressPbfts converts echo context to params.
func (w *ServerInterfaceWrapper) GetAddressPbfts(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address AddressParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAddressPbftsParams
	// ------------- Required query parameter "pagination" -------------

	err = runtime.BindQueryParameter("form", true, true, "pagination", ctx.QueryParams(), &params.Pagination)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pagination: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAddressPbfts(ctx, address, params)
	return err
}

// GetAddressStats converts echo context to params.
func (w *ServerInterfaceWrapper) GetAddressStats(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address AddressParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAddressStats(ctx, address)
	return err
}

// GetAddressTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetAddressTransactions(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address AddressParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAddressTransactionsParams
	// ------------- Required query parameter "pagination" -------------

	err = runtime.BindQueryParameter("form", true, true, "pagination", ctx.QueryParams(), &params.Pagination)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pagination: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAddressTransactions(ctx, address, params)
	return err
}

// GetAddressYield converts echo context to params.
func (w *ServerInterfaceWrapper) GetAddressYield(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address AddressParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAddressYieldParams
	// ------------- Optional query parameter "blockNumber" -------------

	err = runtime.BindQueryParameter("form", true, false, "blockNumber", ctx.QueryParams(), &params.BlockNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter blockNumber: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAddressYield(ctx, address, params)
	return err
}

// GetHolders converts echo context to params.
func (w *ServerInterfaceWrapper) GetHolders(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetHoldersParams
	// ------------- Required query parameter "pagination" -------------

	err = runtime.BindQueryParameter("form", true, true, "pagination", ctx.QueryParams(), &params.Pagination)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pagination: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetHolders(ctx, params)
	return err
}

// GetTotalSupply converts echo context to params.
func (w *ServerInterfaceWrapper) GetTotalSupply(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTotalSupply(ctx)
	return err
}

// GetTotalYield converts echo context to params.
func (w *ServerInterfaceWrapper) GetTotalYield(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTotalYieldParams
	// ------------- Optional query parameter "blockNumber" -------------

	err = runtime.BindQueryParameter("form", true, false, "blockNumber", ctx.QueryParams(), &params.BlockNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter blockNumber: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTotalYield(ctx, params)
	return err
}

// GetTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransaction(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "hash" -------------
	var hash HashParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "hash", runtime.ParamLocationPath, ctx.Param("hash"), &hash)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hash: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTransaction(ctx, hash)
	return err
}

// GetInternalTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetInternalTransactions(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "hash" -------------
	var hash HashParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "hash", runtime.ParamLocationPath, ctx.Param("hash"), &hash)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hash: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetInternalTransactions(ctx, hash)
	return err
}

// GetTransactionLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransactionLogs(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "hash" -------------
	var hash HashParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "hash", runtime.ParamLocationPath, ctx.Param("hash"), &hash)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hash: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTransactionLogs(ctx, hash)
	return err
}

// GetValidators converts echo context to params.
func (w *ServerInterfaceWrapper) GetValidators(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetValidatorsParams
	// ------------- Optional query parameter "week" -------------

	err = runtime.BindQueryParameter("form", true, false, "week", ctx.QueryParams(), &params.Week)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter week: %s", err))
	}

	// ------------- Required query parameter "pagination" -------------

	err = runtime.BindQueryParameter("form", true, true, "pagination", ctx.QueryParams(), &params.Pagination)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pagination: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetValidators(ctx, params)
	return err
}

// GetValidatorsTotal converts echo context to params.
func (w *ServerInterfaceWrapper) GetValidatorsTotal(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetValidatorsTotalParams
	// ------------- Optional query parameter "week" -------------

	err = runtime.BindQueryParameter("form", true, false, "week", ctx.QueryParams(), &params.Week)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter week: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetValidatorsTotal(ctx, params)
	return err
}

// GetValidator converts echo context to params.
func (w *ServerInterfaceWrapper) GetValidator(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address AddressParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetValidatorParams
	// ------------- Optional query parameter "week" -------------

	err = runtime.BindQueryParameter("form", true, false, "week", ctx.QueryParams(), &params.Week)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter week: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetValidator(ctx, address, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/address/:address/dags", wrapper.GetAddressDags)
	router.GET(baseURL+"/address/:address/pbfts", wrapper.GetAddressPbfts)
	router.GET(baseURL+"/address/:address/stats", wrapper.GetAddressStats)
	router.GET(baseURL+"/address/:address/transactions", wrapper.GetAddressTransactions)
	router.GET(baseURL+"/address/:address/yield", wrapper.GetAddressYield)
	router.GET(baseURL+"/holders", wrapper.GetHolders)
	router.GET(baseURL+"/totalSupply", wrapper.GetTotalSupply)
	router.GET(baseURL+"/totalYield", wrapper.GetTotalYield)
	router.GET(baseURL+"/transaction/:hash", wrapper.GetTransaction)
	router.GET(baseURL+"/transaction/:hash/internal_transactions", wrapper.GetInternalTransactions)
	router.GET(baseURL+"/transaction/:hash/logs", wrapper.GetTransactionLogs)
	router.GET(baseURL+"/validators", wrapper.GetValidators)
	router.GET(baseURL+"/validators/total", wrapper.GetValidatorsTotal)
	router.GET(baseURL+"/validators/:address", wrapper.GetValidator)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
