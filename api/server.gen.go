// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.5-0.20230118012357-f4cf8f9a5703 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/Taraxa-project/taraxa-indexer/models"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns all DAG blocks
	// (GET /address/{address}/dags)
	GetAddressDags(ctx echo.Context, address AddressParam, params GetAddressDagsParams) error
	// Returns all PBFT blocks
	// (GET /address/{address}/pbfts)
	GetAddressPbfts(ctx echo.Context, address AddressParam, params GetAddressPbftsParams) error
	// Returns stats for the address
	// (GET /address/{address}/stats)
	GetAddressStats(ctx echo.Context, address AddressParam) error
	// Returns all transactions
	// (GET /address/{address}/transactions)
	GetAddressTransactions(ctx echo.Context, address AddressParam, params GetAddressTransactionsParams) error
	// Returns total supply
	// (GET /totalSupply)
	GetTotalSupply(ctx echo.Context) error
	// Returns internal transactions
	// (GET /transaction/{hash}/internal_transactions)
	GetInternalTransactions(ctx echo.Context, hash HashParam) error
	// Returns all validators
	// (GET /validators)
	GetValidators(ctx echo.Context, params GetValidatorsParams) error
	// Returns total number of PBFT blocks
	// (GET /validators/total)
	GetValidatorsTotal(ctx echo.Context, params GetValidatorsTotalParams) error
	// Returns info about the validator
	// (GET /validators/{address})
	GetValidator(ctx echo.Context, address AddressParam, params GetValidatorParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetAddressDags converts echo context to params.
func (w *ServerInterfaceWrapper) GetAddressDags(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address AddressParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAddressDagsParams
	// ------------- Required query parameter "pagination" -------------

	err = runtime.BindQueryParameter("form", true, true, "pagination", ctx.QueryParams(), &params.Pagination)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pagination: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAddressDags(ctx, address, params)
	return err
}

// GetAddressPbfts converts echo context to params.
func (w *ServerInterfaceWrapper) GetAddressPbfts(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address AddressParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAddressPbftsParams
	// ------------- Required query parameter "pagination" -------------

	err = runtime.BindQueryParameter("form", true, true, "pagination", ctx.QueryParams(), &params.Pagination)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pagination: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAddressPbfts(ctx, address, params)
	return err
}

// GetAddressStats converts echo context to params.
func (w *ServerInterfaceWrapper) GetAddressStats(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address AddressParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAddressStats(ctx, address)
	return err
}

// GetAddressTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetAddressTransactions(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address AddressParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAddressTransactionsParams
	// ------------- Required query parameter "pagination" -------------

	err = runtime.BindQueryParameter("form", true, true, "pagination", ctx.QueryParams(), &params.Pagination)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pagination: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAddressTransactions(ctx, address, params)
	return err
}

// GetTotalSupply converts echo context to params.
func (w *ServerInterfaceWrapper) GetTotalSupply(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTotalSupply(ctx)
	return err
}

// GetInternalTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetInternalTransactions(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "hash" -------------
	var hash HashParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "hash", runtime.ParamLocationPath, ctx.Param("hash"), &hash)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hash: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetInternalTransactions(ctx, hash)
	return err
}

// GetValidators converts echo context to params.
func (w *ServerInterfaceWrapper) GetValidators(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetValidatorsParams
	// ------------- Optional query parameter "week" -------------

	err = runtime.BindQueryParameter("form", true, false, "week", ctx.QueryParams(), &params.Week)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter week: %s", err))
	}

	// ------------- Required query parameter "pagination" -------------

	err = runtime.BindQueryParameter("form", true, true, "pagination", ctx.QueryParams(), &params.Pagination)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pagination: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetValidators(ctx, params)
	return err
}

// GetValidatorsTotal converts echo context to params.
func (w *ServerInterfaceWrapper) GetValidatorsTotal(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetValidatorsTotalParams
	// ------------- Optional query parameter "week" -------------

	err = runtime.BindQueryParameter("form", true, false, "week", ctx.QueryParams(), &params.Week)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter week: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetValidatorsTotal(ctx, params)
	return err
}

// GetValidator converts echo context to params.
func (w *ServerInterfaceWrapper) GetValidator(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address AddressParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetValidatorParams
	// ------------- Optional query parameter "week" -------------

	err = runtime.BindQueryParameter("form", true, false, "week", ctx.QueryParams(), &params.Week)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter week: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetValidator(ctx, address, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/address/:address/dags", wrapper.GetAddressDags)
	router.GET(baseURL+"/address/:address/pbfts", wrapper.GetAddressPbfts)
	router.GET(baseURL+"/address/:address/stats", wrapper.GetAddressStats)
	router.GET(baseURL+"/address/:address/transactions", wrapper.GetAddressTransactions)
	router.GET(baseURL+"/totalSupply", wrapper.GetTotalSupply)
	router.GET(baseURL+"/transaction/:hash/internal_transactions", wrapper.GetInternalTransactions)
	router.GET(baseURL+"/validators", wrapper.GetValidators)
	router.GET(baseURL+"/validators/total", wrapper.GetValidatorsTotal)
	router.GET(baseURL+"/validators/:address", wrapper.GetValidator)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"2hShK5osAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
