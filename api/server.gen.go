// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/Taraxa-project/taraxa-indexer/models"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns all DAG blocks
	// (GET /address/{address}/dags)
	GetAddressDags(ctx echo.Context, address AddressParam, params GetAddressDagsParams) error
	// Returns all PBFT blocks
	// (GET /address/{address}/pbfts)
	GetAddressPbfts(ctx echo.Context, address AddressParam, params GetAddressPbftsParams) error
	// Returns stats for the address
	// (GET /address/{address}/stats)
	GetAddressStats(ctx echo.Context, address AddressParam) error
	// Returns all transactions
	// (GET /address/{address}/transactions)
	GetAddressTransactions(ctx echo.Context, address AddressParam, params GetAddressTransactionsParams) error
	// Returns yield for the address
	// (GET /address/{address}/yield)
	GetAddressYield(ctx echo.Context, address AddressParam, params GetAddressYieldParams) error
	// Returns yield for the address
	// (GET /address/{address}/yieldForInterval)
	GetAddressYieldForInterval(ctx echo.Context, address AddressParam, params GetAddressYieldForIntervalParams) error
	// Returns chain stats
	// (GET /chainStats)
	GetChainStats(ctx echo.Context) error
	// Returns the number of active addresses for the selected month
	// (GET /contractStats)
	GetContractStats(ctx echo.Context, params GetContractStatsParams) error
	// Returns the list of TARA token holders and their balances
	// (GET /holders)
	GetHolders(ctx echo.Context, params GetHoldersParams) error
	// Returns the number of active addresses for the selected month
	// (GET /monthlyActiveAddresses)
	GetMonthlyActiveAddresses(ctx echo.Context, params GetMonthlyActiveAddressesParams) error
	// Returns the number of active addresses for the selected month
	// (GET /monthlyStats)
	GetMonthlyStats(ctx echo.Context, params GetMonthlyStatsParams) error
	// Returns total supply
	// (GET /totalSupply)
	GetTotalSupply(ctx echo.Context) error
	// Returns total yield
	// (GET /totalYield)
	GetTotalYield(ctx echo.Context, params GetTotalYieldParams) error
	// Returns the decoded transaction
	// (GET /transaction/{hash})
	GetTransaction(ctx echo.Context, hash HashParam) error
	// Returns internal transactions
	// (GET /transaction/{hash}/internal_transactions)
	GetInternalTransactions(ctx echo.Context, hash HashParam) error
	// Returns event logs of transaction
	// (GET /transaction/{hash}/logs)
	GetTransactionLogs(ctx echo.Context, hash HashParam) error
	// Returns all validators
	// (GET /validators)
	GetValidators(ctx echo.Context, params GetValidatorsParams) error
	// Returns total number of PBFT blocks
	// (GET /validators/total)
	GetValidatorsTotal(ctx echo.Context, params GetValidatorsTotalParams) error
	// Returns info about the validator
	// (GET /validators/{address})
	GetValidator(ctx echo.Context, address AddressParam, params GetValidatorParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetAddressDags converts echo context to params.
func (w *ServerInterfaceWrapper) GetAddressDags(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address AddressParam

	err = runtime.BindStyledParameterWithOptions("simple", "address", ctx.Param("address"), &address, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAddressDagsParams
	// ------------- Required query parameter "pagination" -------------

	err = runtime.BindQueryParameter("form", true, true, "pagination", ctx.QueryParams(), &params.Pagination)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pagination: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAddressDags(ctx, address, params)
	return err
}

// GetAddressPbfts converts echo context to params.
func (w *ServerInterfaceWrapper) GetAddressPbfts(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address AddressParam

	err = runtime.BindStyledParameterWithOptions("simple", "address", ctx.Param("address"), &address, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAddressPbftsParams
	// ------------- Required query parameter "pagination" -------------

	err = runtime.BindQueryParameter("form", true, true, "pagination", ctx.QueryParams(), &params.Pagination)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pagination: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAddressPbfts(ctx, address, params)
	return err
}

// GetAddressStats converts echo context to params.
func (w *ServerInterfaceWrapper) GetAddressStats(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address AddressParam

	err = runtime.BindStyledParameterWithOptions("simple", "address", ctx.Param("address"), &address, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAddressStats(ctx, address)
	return err
}

// GetAddressTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetAddressTransactions(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address AddressParam

	err = runtime.BindStyledParameterWithOptions("simple", "address", ctx.Param("address"), &address, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAddressTransactionsParams
	// ------------- Required query parameter "pagination" -------------

	err = runtime.BindQueryParameter("form", true, true, "pagination", ctx.QueryParams(), &params.Pagination)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pagination: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAddressTransactions(ctx, address, params)
	return err
}

// GetAddressYield converts echo context to params.
func (w *ServerInterfaceWrapper) GetAddressYield(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address AddressParam

	err = runtime.BindStyledParameterWithOptions("simple", "address", ctx.Param("address"), &address, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAddressYieldParams
	// ------------- Optional query parameter "blockNumber" -------------

	err = runtime.BindQueryParameter("form", true, false, "blockNumber", ctx.QueryParams(), &params.BlockNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter blockNumber: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAddressYield(ctx, address, params)
	return err
}

// GetAddressYieldForInterval converts echo context to params.
func (w *ServerInterfaceWrapper) GetAddressYieldForInterval(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address AddressParam

	err = runtime.BindStyledParameterWithOptions("simple", "address", ctx.Param("address"), &address, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAddressYieldForIntervalParams
	// ------------- Optional query parameter "fromBlock" -------------

	err = runtime.BindQueryParameter("form", true, false, "fromBlock", ctx.QueryParams(), &params.FromBlock)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fromBlock: %s", err))
	}

	// ------------- Required query parameter "toBlock" -------------

	err = runtime.BindQueryParameter("form", true, true, "toBlock", ctx.QueryParams(), &params.ToBlock)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter toBlock: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAddressYieldForInterval(ctx, address, params)
	return err
}

// GetChainStats converts echo context to params.
func (w *ServerInterfaceWrapper) GetChainStats(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetChainStats(ctx)
	return err
}

// GetContractStats converts echo context to params.
func (w *ServerInterfaceWrapper) GetContractStats(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetContractStatsParams
	// ------------- Required query parameter "fromDate" -------------

	err = runtime.BindQueryParameter("form", true, true, "fromDate", ctx.QueryParams(), &params.FromDate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fromDate: %s", err))
	}

	// ------------- Required query parameter "toDate" -------------

	err = runtime.BindQueryParameter("form", true, true, "toDate", ctx.QueryParams(), &params.ToDate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter toDate: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetContractStats(ctx, params)
	return err
}

// GetHolders converts echo context to params.
func (w *ServerInterfaceWrapper) GetHolders(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetHoldersParams
	// ------------- Required query parameter "pagination" -------------

	err = runtime.BindQueryParameter("form", true, true, "pagination", ctx.QueryParams(), &params.Pagination)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pagination: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetHolders(ctx, params)
	return err
}

// GetMonthlyActiveAddresses converts echo context to params.
func (w *ServerInterfaceWrapper) GetMonthlyActiveAddresses(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetMonthlyActiveAddressesParams
	// ------------- Optional query parameter "date" -------------

	err = runtime.BindQueryParameter("form", true, false, "date", ctx.QueryParams(), &params.Date)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter date: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetMonthlyActiveAddresses(ctx, params)
	return err
}

// GetMonthlyStats converts echo context to params.
func (w *ServerInterfaceWrapper) GetMonthlyStats(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetMonthlyStatsParams
	// ------------- Optional query parameter "date" -------------

	err = runtime.BindQueryParameter("form", true, false, "date", ctx.QueryParams(), &params.Date)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter date: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetMonthlyStats(ctx, params)
	return err
}

// GetTotalSupply converts echo context to params.
func (w *ServerInterfaceWrapper) GetTotalSupply(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTotalSupply(ctx)
	return err
}

// GetTotalYield converts echo context to params.
func (w *ServerInterfaceWrapper) GetTotalYield(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTotalYieldParams
	// ------------- Optional query parameter "blockNumber" -------------

	err = runtime.BindQueryParameter("form", true, false, "blockNumber", ctx.QueryParams(), &params.BlockNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter blockNumber: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTotalYield(ctx, params)
	return err
}

// GetTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransaction(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "hash" -------------
	var hash HashParam

	err = runtime.BindStyledParameterWithOptions("simple", "hash", ctx.Param("hash"), &hash, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hash: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTransaction(ctx, hash)
	return err
}

// GetInternalTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetInternalTransactions(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "hash" -------------
	var hash HashParam

	err = runtime.BindStyledParameterWithOptions("simple", "hash", ctx.Param("hash"), &hash, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hash: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetInternalTransactions(ctx, hash)
	return err
}

// GetTransactionLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransactionLogs(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "hash" -------------
	var hash HashParam

	err = runtime.BindStyledParameterWithOptions("simple", "hash", ctx.Param("hash"), &hash, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hash: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTransactionLogs(ctx, hash)
	return err
}

// GetValidators converts echo context to params.
func (w *ServerInterfaceWrapper) GetValidators(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetValidatorsParams
	// ------------- Optional query parameter "week" -------------

	err = runtime.BindQueryParameter("form", true, false, "week", ctx.QueryParams(), &params.Week)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter week: %s", err))
	}

	// ------------- Required query parameter "pagination" -------------

	err = runtime.BindQueryParameter("form", true, true, "pagination", ctx.QueryParams(), &params.Pagination)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pagination: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetValidators(ctx, params)
	return err
}

// GetValidatorsTotal converts echo context to params.
func (w *ServerInterfaceWrapper) GetValidatorsTotal(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetValidatorsTotalParams
	// ------------- Optional query parameter "week" -------------

	err = runtime.BindQueryParameter("form", true, false, "week", ctx.QueryParams(), &params.Week)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter week: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetValidatorsTotal(ctx, params)
	return err
}

// GetValidator converts echo context to params.
func (w *ServerInterfaceWrapper) GetValidator(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address AddressParam

	err = runtime.BindStyledParameterWithOptions("simple", "address", ctx.Param("address"), &address, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetValidatorParams
	// ------------- Optional query parameter "week" -------------

	err = runtime.BindQueryParameter("form", true, false, "week", ctx.QueryParams(), &params.Week)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter week: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetValidator(ctx, address, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/address/:address/dags", wrapper.GetAddressDags)
	router.GET(baseURL+"/address/:address/pbfts", wrapper.GetAddressPbfts)
	router.GET(baseURL+"/address/:address/stats", wrapper.GetAddressStats)
	router.GET(baseURL+"/address/:address/transactions", wrapper.GetAddressTransactions)
	router.GET(baseURL+"/address/:address/yield", wrapper.GetAddressYield)
	router.GET(baseURL+"/address/:address/yieldForInterval", wrapper.GetAddressYieldForInterval)
	router.GET(baseURL+"/chainStats", wrapper.GetChainStats)
	router.GET(baseURL+"/contractStats", wrapper.GetContractStats)
	router.GET(baseURL+"/holders", wrapper.GetHolders)
	router.GET(baseURL+"/monthlyActiveAddresses", wrapper.GetMonthlyActiveAddresses)
	router.GET(baseURL+"/monthlyStats", wrapper.GetMonthlyStats)
	router.GET(baseURL+"/totalSupply", wrapper.GetTotalSupply)
	router.GET(baseURL+"/totalYield", wrapper.GetTotalYield)
	router.GET(baseURL+"/transaction/:hash", wrapper.GetTransaction)
	router.GET(baseURL+"/transaction/:hash/internal_transactions", wrapper.GetInternalTransactions)
	router.GET(baseURL+"/transaction/:hash/logs", wrapper.GetTransactionLogs)
	router.GET(baseURL+"/validators", wrapper.GetValidators)
	router.GET(baseURL+"/validators/total", wrapper.GetValidatorsTotal)
	router.GET(baseURL+"/validators/:address", wrapper.GetValidator)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
