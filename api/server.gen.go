// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/Taraxa-project/taraxa-indexer/models"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns all DAG blocks
	// (GET /address/{address}/dags)
	GetAddressDags(ctx echo.Context, address AddressParam, params GetAddressDagsParams) error
	// Returns all PBFT blocks
	// (GET /address/{address}/pbfts)
	GetAddressPbfts(ctx echo.Context, address AddressParam, params GetAddressPbftsParams) error
	// Returns stats for the address
	// (GET /address/{address}/stats)
	GetAddressStats(ctx echo.Context, address AddressParam) error
	// Returns all transactions
	// (GET /address/{address}/transactions)
	GetAddressTransactions(ctx echo.Context, address AddressParam, params GetAddressTransactionsParams) error
	// Returns yield for the address
	// (GET /address/{address}/yield)
	GetAddressYield(ctx echo.Context, address AddressParam, params GetAddressYieldParams) error
	// Returns yield for the address
	// (GET /address/{address}/yieldForInterval)
	GetAddressYieldForInterval(ctx echo.Context, address AddressParam, params GetAddressYieldForIntervalParams) error
	// Returns chain stats
	// (GET /chainStats)
	GetChainStats(ctx echo.Context) error
	// Returns the number of active addresses for the selected month
	// (GET /contractStats)
	GetContractStats(ctx echo.Context, params GetContractStatsParams) error
	// Returns the list of TARA token holders and their balances
	// (GET /holders)
	GetHolders(ctx echo.Context, params GetHoldersParams) error
	// Returns the number of active addresses for the selected month
	// (GET /monthlyActiveAddresses)
	GetMonthlyActiveAddresses(ctx echo.Context, params GetMonthlyActiveAddressesParams) error
	// Returns the number of active addresses for the selected month
	// (GET /monthlyStats)
	GetMonthlyStats(ctx echo.Context, params GetMonthlyStatsParams) error
	// Returns total supply
	// (GET /totalSupply)
	GetTotalSupply(ctx echo.Context) error
	// Returns total yield
	// (GET /totalYield)
	GetTotalYield(ctx echo.Context, params GetTotalYieldParams) error
	// Returns the decoded transaction
	// (GET /transaction/{hash})
	GetTransaction(ctx echo.Context, hash HashParam) error
	// Returns internal transactions
	// (GET /transaction/{hash}/internal_transactions)
	GetInternalTransactions(ctx echo.Context, hash HashParam) error
	// Returns event logs of transaction
	// (GET /transaction/{hash}/logs)
	GetTransactionLogs(ctx echo.Context, hash HashParam) error
	// Returns all validators
	// (GET /validators)
	GetValidators(ctx echo.Context, params GetValidatorsParams) error
	// Returns total number of PBFT blocks
	// (GET /validators/total)
	GetValidatorsTotal(ctx echo.Context, params GetValidatorsTotalParams) error
	// Returns info about the validator
	// (GET /validators/{address})
	GetValidator(ctx echo.Context, address AddressParam, params GetValidatorParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetAddressDags converts echo context to params.
func (w *ServerInterfaceWrapper) GetAddressDags(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address AddressParam

	err = runtime.BindStyledParameterWithOptions("simple", "address", ctx.Param("address"), &address, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAddressDagsParams
	// ------------- Required query parameter "pagination" -------------

	err = runtime.BindQueryParameter("form", true, true, "pagination", ctx.QueryParams(), &params.Pagination)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pagination: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAddressDags(ctx, address, params)
	return err
}

// GetAddressPbfts converts echo context to params.
func (w *ServerInterfaceWrapper) GetAddressPbfts(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address AddressParam

	err = runtime.BindStyledParameterWithOptions("simple", "address", ctx.Param("address"), &address, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAddressPbftsParams
	// ------------- Required query parameter "pagination" -------------

	err = runtime.BindQueryParameter("form", true, true, "pagination", ctx.QueryParams(), &params.Pagination)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pagination: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAddressPbfts(ctx, address, params)
	return err
}

// GetAddressStats converts echo context to params.
func (w *ServerInterfaceWrapper) GetAddressStats(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address AddressParam

	err = runtime.BindStyledParameterWithOptions("simple", "address", ctx.Param("address"), &address, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAddressStats(ctx, address)
	return err
}

// GetAddressTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetAddressTransactions(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address AddressParam

	err = runtime.BindStyledParameterWithOptions("simple", "address", ctx.Param("address"), &address, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAddressTransactionsParams
	// ------------- Required query parameter "pagination" -------------

	err = runtime.BindQueryParameter("form", true, true, "pagination", ctx.QueryParams(), &params.Pagination)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pagination: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAddressTransactions(ctx, address, params)
	return err
}

// GetAddressYield converts echo context to params.
func (w *ServerInterfaceWrapper) GetAddressYield(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address AddressParam

	err = runtime.BindStyledParameterWithOptions("simple", "address", ctx.Param("address"), &address, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAddressYieldParams
	// ------------- Optional query parameter "blockNumber" -------------

	err = runtime.BindQueryParameter("form", true, false, "blockNumber", ctx.QueryParams(), &params.BlockNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter blockNumber: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAddressYield(ctx, address, params)
	return err
}

// GetAddressYieldForInterval converts echo context to params.
func (w *ServerInterfaceWrapper) GetAddressYieldForInterval(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address AddressParam

	err = runtime.BindStyledParameterWithOptions("simple", "address", ctx.Param("address"), &address, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAddressYieldForIntervalParams
	// ------------- Optional query parameter "fromBlock" -------------

	err = runtime.BindQueryParameter("form", true, false, "fromBlock", ctx.QueryParams(), &params.FromBlock)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fromBlock: %s", err))
	}

	// ------------- Required query parameter "toBlock" -------------

	err = runtime.BindQueryParameter("form", true, true, "toBlock", ctx.QueryParams(), &params.ToBlock)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter toBlock: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAddressYieldForInterval(ctx, address, params)
	return err
}

// GetChainStats converts echo context to params.
func (w *ServerInterfaceWrapper) GetChainStats(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetChainStats(ctx)
	return err
}

// GetContractStats converts echo context to params.
func (w *ServerInterfaceWrapper) GetContractStats(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetContractStatsParams
	// ------------- Optional query parameter "fromDate" -------------

	err = runtime.BindQueryParameter("form", true, false, "fromDate", ctx.QueryParams(), &params.FromDate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fromDate: %s", err))
	}

	// ------------- Optional query parameter "toDate" -------------

	err = runtime.BindQueryParameter("form", true, false, "toDate", ctx.QueryParams(), &params.ToDate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter toDate: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetContractStats(ctx, params)
	return err
}

// GetHolders converts echo context to params.
func (w *ServerInterfaceWrapper) GetHolders(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetHoldersParams
	// ------------- Required query parameter "pagination" -------------

	err = runtime.BindQueryParameter("form", true, true, "pagination", ctx.QueryParams(), &params.Pagination)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pagination: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetHolders(ctx, params)
	return err
}

// GetMonthlyActiveAddresses converts echo context to params.
func (w *ServerInterfaceWrapper) GetMonthlyActiveAddresses(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetMonthlyActiveAddressesParams
	// ------------- Optional query parameter "date" -------------

	err = runtime.BindQueryParameter("form", true, false, "date", ctx.QueryParams(), &params.Date)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter date: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetMonthlyActiveAddresses(ctx, params)
	return err
}

// GetMonthlyStats converts echo context to params.
func (w *ServerInterfaceWrapper) GetMonthlyStats(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetMonthlyStatsParams
	// ------------- Optional query parameter "date" -------------

	err = runtime.BindQueryParameter("form", true, false, "date", ctx.QueryParams(), &params.Date)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter date: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetMonthlyStats(ctx, params)
	return err
}

// GetTotalSupply converts echo context to params.
func (w *ServerInterfaceWrapper) GetTotalSupply(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTotalSupply(ctx)
	return err
}

// GetTotalYield converts echo context to params.
func (w *ServerInterfaceWrapper) GetTotalYield(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTotalYieldParams
	// ------------- Optional query parameter "blockNumber" -------------

	err = runtime.BindQueryParameter("form", true, false, "blockNumber", ctx.QueryParams(), &params.BlockNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter blockNumber: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTotalYield(ctx, params)
	return err
}

// GetTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransaction(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "hash" -------------
	var hash HashParam

	err = runtime.BindStyledParameterWithOptions("simple", "hash", ctx.Param("hash"), &hash, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hash: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTransaction(ctx, hash)
	return err
}

// GetInternalTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetInternalTransactions(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "hash" -------------
	var hash HashParam

	err = runtime.BindStyledParameterWithOptions("simple", "hash", ctx.Param("hash"), &hash, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hash: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetInternalTransactions(ctx, hash)
	return err
}

// GetTransactionLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransactionLogs(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "hash" -------------
	var hash HashParam

	err = runtime.BindStyledParameterWithOptions("simple", "hash", ctx.Param("hash"), &hash, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hash: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTransactionLogs(ctx, hash)
	return err
}

// GetValidators converts echo context to params.
func (w *ServerInterfaceWrapper) GetValidators(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetValidatorsParams
	// ------------- Optional query parameter "week" -------------

	err = runtime.BindQueryParameter("form", true, false, "week", ctx.QueryParams(), &params.Week)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter week: %s", err))
	}

	// ------------- Required query parameter "pagination" -------------

	err = runtime.BindQueryParameter("form", true, true, "pagination", ctx.QueryParams(), &params.Pagination)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pagination: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetValidators(ctx, params)
	return err
}

// GetValidatorsTotal converts echo context to params.
func (w *ServerInterfaceWrapper) GetValidatorsTotal(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetValidatorsTotalParams
	// ------------- Optional query parameter "week" -------------

	err = runtime.BindQueryParameter("form", true, false, "week", ctx.QueryParams(), &params.Week)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter week: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetValidatorsTotal(ctx, params)
	return err
}

// GetValidator converts echo context to params.
func (w *ServerInterfaceWrapper) GetValidator(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address AddressParam

	err = runtime.BindStyledParameterWithOptions("simple", "address", ctx.Param("address"), &address, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetValidatorParams
	// ------------- Optional query parameter "week" -------------

	err = runtime.BindQueryParameter("form", true, false, "week", ctx.QueryParams(), &params.Week)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter week: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetValidator(ctx, address, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/address/:address/dags", wrapper.GetAddressDags)
	router.GET(baseURL+"/address/:address/pbfts", wrapper.GetAddressPbfts)
	router.GET(baseURL+"/address/:address/stats", wrapper.GetAddressStats)
	router.GET(baseURL+"/address/:address/transactions", wrapper.GetAddressTransactions)
	router.GET(baseURL+"/address/:address/yield", wrapper.GetAddressYield)
	router.GET(baseURL+"/address/:address/yieldForInterval", wrapper.GetAddressYieldForInterval)
	router.GET(baseURL+"/chainStats", wrapper.GetChainStats)
	router.GET(baseURL+"/contractStats", wrapper.GetContractStats)
	router.GET(baseURL+"/holders", wrapper.GetHolders)
	router.GET(baseURL+"/monthlyActiveAddresses", wrapper.GetMonthlyActiveAddresses)
	router.GET(baseURL+"/monthlyStats", wrapper.GetMonthlyStats)
	router.GET(baseURL+"/totalSupply", wrapper.GetTotalSupply)
	router.GET(baseURL+"/totalYield", wrapper.GetTotalYield)
	router.GET(baseURL+"/transaction/:hash", wrapper.GetTransaction)
	router.GET(baseURL+"/transaction/:hash/internal_transactions", wrapper.GetInternalTransactions)
	router.GET(baseURL+"/transaction/:hash/logs", wrapper.GetTransactionLogs)
	router.GET(baseURL+"/validators", wrapper.GetValidators)
	router.GET(baseURL+"/validators/total", wrapper.GetValidatorsTotal)
	router.GET(baseURL+"/validators/:address", wrapper.GetValidator)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
