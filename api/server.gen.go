// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/Taraxa-project/taraxa-indexer/models"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns all DAG blocks
	// (GET /address/{address}/dags)
	GetAddressDags(ctx echo.Context, address AddressParam, params GetAddressDagsParams) error
	// Returns all PBFT blocks
	// (GET /address/{address}/pbfts)
	GetAddressPbfts(ctx echo.Context, address AddressParam, params GetAddressPbftsParams) error
	// Returns stats for the address
	// (GET /address/{address}/stats)
	GetAddressStats(ctx echo.Context, address AddressParam) error
	// Returns all transactions
	// (GET /address/{address}/transactions)
	GetAddressTransactions(ctx echo.Context, address AddressParam, params GetAddressTransactionsParams) error
	// Returns yield for the address
	// (GET /address/{address}/yield)
	GetAddressYield(ctx echo.Context, address AddressParam, params GetAddressYieldParams) error
	// Returns yield for the address
	// (GET /address/{address}/yieldForInterval)
	GetAddressYieldForInterval(ctx echo.Context, address AddressParam, params GetAddressYieldForIntervalParams) error
	// Returns chain stats
	// (GET /chainStats)
	GetChainStats(ctx echo.Context) error
	// Returns the number of active addresses for the selected month
	// (GET /contractStats)
	GetContractStats(ctx echo.Context, params GetContractStatsParams) error
	// Returns the list of TARA token holders and their balances
	// (GET /holders)
	GetHolders(ctx echo.Context, params GetHoldersParams) error
	// Returns the number of active addresses for the selected month
	// (GET /monthlyActiveAddresses)
	GetMonthlyActiveAddresses(ctx echo.Context, params GetMonthlyActiveAddressesParams) error
	// Returns the number of active addresses for the selected month
	// (GET /monthlyStats)
	GetMonthlyStats(ctx echo.Context, params GetMonthlyStatsParams) error
	// Returns total supply
	// (GET /totalSupply)
	GetTotalSupply(ctx echo.Context) error
	// Returns total yield
	// (GET /totalYield)
	GetTotalYield(ctx echo.Context, params GetTotalYieldParams) error
	// Returns the decoded transaction
	// (GET /transaction/{hash})
	GetTransaction(ctx echo.Context, hash HashParam) error
	// Returns internal transactions
	// (GET /transaction/{hash}/internal_transactions)
	GetInternalTransactions(ctx echo.Context, hash HashParam) error
	// Returns event logs of transaction
	// (GET /transaction/{hash}/logs)
	GetTransactionLogs(ctx echo.Context, hash HashParam) error
	// Returns all validators
	// (GET /validators)
	GetValidators(ctx echo.Context, params GetValidatorsParams) error
	// Returns total number of PBFT blocks
	// (GET /validators/total)
	GetValidatorsTotal(ctx echo.Context, params GetValidatorsTotalParams) error
	// Returns info about the validator
	// (GET /validators/{address})
	GetValidator(ctx echo.Context, address AddressParam, params GetValidatorParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetAddressDags converts echo context to params.
func (w *ServerInterfaceWrapper) GetAddressDags(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address AddressParam

	err = runtime.BindStyledParameterWithOptions("simple", "address", ctx.Param("address"), &address, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAddressDagsParams
	// ------------- Required query parameter "pagination" -------------

	err = runtime.BindQueryParameter("form", true, true, "pagination", ctx.QueryParams(), &params.Pagination)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pagination: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAddressDags(ctx, address, params)
	return err
}

// GetAddressPbfts converts echo context to params.
func (w *ServerInterfaceWrapper) GetAddressPbfts(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address AddressParam

	err = runtime.BindStyledParameterWithOptions("simple", "address", ctx.Param("address"), &address, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAddressPbftsParams
	// ------------- Required query parameter "pagination" -------------

	err = runtime.BindQueryParameter("form", true, true, "pagination", ctx.QueryParams(), &params.Pagination)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pagination: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAddressPbfts(ctx, address, params)
	return err
}

// GetAddressStats converts echo context to params.
func (w *ServerInterfaceWrapper) GetAddressStats(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address AddressParam

	err = runtime.BindStyledParameterWithOptions("simple", "address", ctx.Param("address"), &address, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAddressStats(ctx, address)
	return err
}

// GetAddressTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetAddressTransactions(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address AddressParam

	err = runtime.BindStyledParameterWithOptions("simple", "address", ctx.Param("address"), &address, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAddressTransactionsParams
	// ------------- Required query parameter "pagination" -------------

	err = runtime.BindQueryParameter("form", true, true, "pagination", ctx.QueryParams(), &params.Pagination)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pagination: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAddressTransactions(ctx, address, params)
	return err
}

// GetAddressYield converts echo context to params.
func (w *ServerInterfaceWrapper) GetAddressYield(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address AddressParam

	err = runtime.BindStyledParameterWithOptions("simple", "address", ctx.Param("address"), &address, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAddressYieldParams
	// ------------- Optional query parameter "blockNumber" -------------

	err = runtime.BindQueryParameter("form", true, false, "blockNumber", ctx.QueryParams(), &params.BlockNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter blockNumber: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAddressYield(ctx, address, params)
	return err
}

// GetAddressYieldForInterval converts echo context to params.
func (w *ServerInterfaceWrapper) GetAddressYieldForInterval(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address AddressParam

	err = runtime.BindStyledParameterWithOptions("simple", "address", ctx.Param("address"), &address, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAddressYieldForIntervalParams
	// ------------- Optional query parameter "fromBlock" -------------

	err = runtime.BindQueryParameter("form", true, false, "fromBlock", ctx.QueryParams(), &params.FromBlock)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fromBlock: %s", err))
	}

	// ------------- Required query parameter "toBlock" -------------

	err = runtime.BindQueryParameter("form", true, true, "toBlock", ctx.QueryParams(), &params.ToBlock)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter toBlock: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAddressYieldForInterval(ctx, address, params)
	return err
}

// GetChainStats converts echo context to params.
func (w *ServerInterfaceWrapper) GetChainStats(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetChainStats(ctx)
	return err
}

// GetContractStats converts echo context to params.
func (w *ServerInterfaceWrapper) GetContractStats(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetContractStatsParams
	// ------------- Required query parameter "fromDate" -------------

	err = runtime.BindQueryParameter("form", true, true, "fromDate", ctx.QueryParams(), &params.FromDate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fromDate: %s", err))
	}

	// ------------- Required query parameter "toDate" -------------

	err = runtime.BindQueryParameter("form", true, true, "toDate", ctx.QueryParams(), &params.ToDate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter toDate: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetContractStats(ctx, params)
	return err
}

// GetHolders converts echo context to params.
func (w *ServerInterfaceWrapper) GetHolders(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetHoldersParams
	// ------------- Required query parameter "pagination" -------------

	err = runtime.BindQueryParameter("form", true, true, "pagination", ctx.QueryParams(), &params.Pagination)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pagination: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetHolders(ctx, params)
	return err
}

// GetMonthlyActiveAddresses converts echo context to params.
func (w *ServerInterfaceWrapper) GetMonthlyActiveAddresses(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetMonthlyActiveAddressesParams
	// ------------- Optional query parameter "date" -------------

	err = runtime.BindQueryParameter("form", true, false, "date", ctx.QueryParams(), &params.Date)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter date: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetMonthlyActiveAddresses(ctx, params)
	return err
}

// GetMonthlyStats converts echo context to params.
func (w *ServerInterfaceWrapper) GetMonthlyStats(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetMonthlyStatsParams
	// ------------- Optional query parameter "date" -------------

	err = runtime.BindQueryParameter("form", true, false, "date", ctx.QueryParams(), &params.Date)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter date: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetMonthlyStats(ctx, params)
	return err
}

// GetTotalSupply converts echo context to params.
func (w *ServerInterfaceWrapper) GetTotalSupply(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTotalSupply(ctx)
	return err
}

// GetTotalYield converts echo context to params.
func (w *ServerInterfaceWrapper) GetTotalYield(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTotalYieldParams
	// ------------- Optional query parameter "blockNumber" -------------

	err = runtime.BindQueryParameter("form", true, false, "blockNumber", ctx.QueryParams(), &params.BlockNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter blockNumber: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTotalYield(ctx, params)
	return err
}

// GetTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransaction(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "hash" -------------
	var hash HashParam

	err = runtime.BindStyledParameterWithOptions("simple", "hash", ctx.Param("hash"), &hash, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hash: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTransaction(ctx, hash)
	return err
}

// GetInternalTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetInternalTransactions(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "hash" -------------
	var hash HashParam

	err = runtime.BindStyledParameterWithOptions("simple", "hash", ctx.Param("hash"), &hash, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hash: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetInternalTransactions(ctx, hash)
	return err
}

// GetTransactionLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransactionLogs(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "hash" -------------
	var hash HashParam

	err = runtime.BindStyledParameterWithOptions("simple", "hash", ctx.Param("hash"), &hash, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hash: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTransactionLogs(ctx, hash)
	return err
}

// GetValidators converts echo context to params.
func (w *ServerInterfaceWrapper) GetValidators(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetValidatorsParams
	// ------------- Optional query parameter "week" -------------

	err = runtime.BindQueryParameter("form", true, false, "week", ctx.QueryParams(), &params.Week)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter week: %s", err))
	}

	// ------------- Required query parameter "pagination" -------------

	err = runtime.BindQueryParameter("form", true, true, "pagination", ctx.QueryParams(), &params.Pagination)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pagination: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetValidators(ctx, params)
	return err
}

// GetValidatorsTotal converts echo context to params.
func (w *ServerInterfaceWrapper) GetValidatorsTotal(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetValidatorsTotalParams
	// ------------- Optional query parameter "week" -------------

	err = runtime.BindQueryParameter("form", true, false, "week", ctx.QueryParams(), &params.Week)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter week: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetValidatorsTotal(ctx, params)
	return err
}

// GetValidator converts echo context to params.
func (w *ServerInterfaceWrapper) GetValidator(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address AddressParam

	err = runtime.BindStyledParameterWithOptions("simple", "address", ctx.Param("address"), &address, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetValidatorParams
	// ------------- Optional query parameter "week" -------------

	err = runtime.BindQueryParameter("form", true, false, "week", ctx.QueryParams(), &params.Week)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter week: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetValidator(ctx, address, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/address/:address/dags", wrapper.GetAddressDags)
	router.GET(baseURL+"/address/:address/pbfts", wrapper.GetAddressPbfts)
	router.GET(baseURL+"/address/:address/stats", wrapper.GetAddressStats)
	router.GET(baseURL+"/address/:address/transactions", wrapper.GetAddressTransactions)
	router.GET(baseURL+"/address/:address/yield", wrapper.GetAddressYield)
	router.GET(baseURL+"/address/:address/yieldForInterval", wrapper.GetAddressYieldForInterval)
	router.GET(baseURL+"/chainStats", wrapper.GetChainStats)
	router.GET(baseURL+"/contractStats", wrapper.GetContractStats)
	router.GET(baseURL+"/holders", wrapper.GetHolders)
	router.GET(baseURL+"/monthlyActiveAddresses", wrapper.GetMonthlyActiveAddresses)
	router.GET(baseURL+"/monthlyStats", wrapper.GetMonthlyStats)
	router.GET(baseURL+"/totalSupply", wrapper.GetTotalSupply)
	router.GET(baseURL+"/totalYield", wrapper.GetTotalYield)
	router.GET(baseURL+"/transaction/:hash", wrapper.GetTransaction)
	router.GET(baseURL+"/transaction/:hash/internal_transactions", wrapper.GetInternalTransactions)
	router.GET(baseURL+"/transaction/:hash/logs", wrapper.GetTransactionLogs)
	router.GET(baseURL+"/validators", wrapper.GetValidators)
	router.GET(baseURL+"/validators/total", wrapper.GetValidatorsTotal)
	router.GET(baseURL+"/validators/:address", wrapper.GetValidator)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
