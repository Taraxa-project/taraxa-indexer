// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.5-0.20230118012357-f4cf8f9a5703 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/Taraxa-project/taraxa-indexer/models"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns all DAG blocks
	// (GET /address/{address}/dags)
	GetAddressDags(ctx echo.Context, address AddressParam, params GetAddressDagsParams) error
	// Returns all PBFT blocks
	// (GET /address/{address}/pbfts)
	GetAddressPbfts(ctx echo.Context, address AddressParam, params GetAddressPbftsParams) error
	// Returns stats for the address
	// (GET /address/{address}/stats)
	GetAddressStats(ctx echo.Context, address AddressParam) error
	// Returns all transactions
	// (GET /address/{address}/transactions)
	GetAddressTransactions(ctx echo.Context, address AddressParam, params GetAddressTransactionsParams) error
	// Returns total supply
	// (GET /totalSupply)
	GetTotalSupply(ctx echo.Context) error
	// Returns internal transactions
	// (GET /transaction/{hash}/internal_transactions)
	GetInternalTransactions(ctx echo.Context, hash HashParam) error
	// Returns all validators
	// (GET /validators)
	GetValidators(ctx echo.Context, params GetValidatorsParams) error
	// Returns total number of PBFT blocks
	// (GET /validators/total)
	GetValidatorsTotal(ctx echo.Context, params GetValidatorsTotalParams) error
	// Returns info about the validator
	// (GET /validators/{address})
	GetValidator(ctx echo.Context, address AddressParam, params GetValidatorParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetAddressDags converts echo context to params.
func (w *ServerInterfaceWrapper) GetAddressDags(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address AddressParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAddressDagsParams
	// ------------- Required query parameter "pagination" -------------

	err = runtime.BindQueryParameter("form", true, true, "pagination", ctx.QueryParams(), &params.Pagination)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pagination: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAddressDags(ctx, address, params)
	return err
}

// GetAddressPbfts converts echo context to params.
func (w *ServerInterfaceWrapper) GetAddressPbfts(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address AddressParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAddressPbftsParams
	// ------------- Required query parameter "pagination" -------------

	err = runtime.BindQueryParameter("form", true, true, "pagination", ctx.QueryParams(), &params.Pagination)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pagination: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAddressPbfts(ctx, address, params)
	return err
}

// GetAddressStats converts echo context to params.
func (w *ServerInterfaceWrapper) GetAddressStats(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address AddressParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAddressStats(ctx, address)
	return err
}

// GetAddressTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetAddressTransactions(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address AddressParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAddressTransactionsParams
	// ------------- Required query parameter "pagination" -------------

	err = runtime.BindQueryParameter("form", true, true, "pagination", ctx.QueryParams(), &params.Pagination)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pagination: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAddressTransactions(ctx, address, params)
	return err
}

// GetTotalSupply converts echo context to params.
func (w *ServerInterfaceWrapper) GetTotalSupply(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTotalSupply(ctx)
	return err
}

// GetInternalTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetInternalTransactions(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "hash" -------------
	var hash HashParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "hash", runtime.ParamLocationPath, ctx.Param("hash"), &hash)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hash: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetInternalTransactions(ctx, hash)
	return err
}

// GetValidators converts echo context to params.
func (w *ServerInterfaceWrapper) GetValidators(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetValidatorsParams
	// ------------- Optional query parameter "week" -------------

	err = runtime.BindQueryParameter("form", true, false, "week", ctx.QueryParams(), &params.Week)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter week: %s", err))
	}

	// ------------- Required query parameter "pagination" -------------

	err = runtime.BindQueryParameter("form", true, true, "pagination", ctx.QueryParams(), &params.Pagination)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pagination: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetValidators(ctx, params)
	return err
}

// GetValidatorsTotal converts echo context to params.
func (w *ServerInterfaceWrapper) GetValidatorsTotal(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetValidatorsTotalParams
	// ------------- Optional query parameter "week" -------------

	err = runtime.BindQueryParameter("form", true, false, "week", ctx.QueryParams(), &params.Week)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter week: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetValidatorsTotal(ctx, params)
	return err
}

// GetValidator converts echo context to params.
func (w *ServerInterfaceWrapper) GetValidator(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address AddressParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetValidatorParams
	// ------------- Optional query parameter "week" -------------

	err = runtime.BindQueryParameter("form", true, false, "week", ctx.QueryParams(), &params.Week)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter week: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetValidator(ctx, address, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/address/:address/dags", wrapper.GetAddressDags)
	router.GET(baseURL+"/address/:address/pbfts", wrapper.GetAddressPbfts)
	router.GET(baseURL+"/address/:address/stats", wrapper.GetAddressStats)
	router.GET(baseURL+"/address/:address/transactions", wrapper.GetAddressTransactions)
	router.GET(baseURL+"/totalSupply", wrapper.GetTotalSupply)
	router.GET(baseURL+"/transaction/:hash/internal_transactions", wrapper.GetInternalTransactions)
	router.GET(baseURL+"/validators", wrapper.GetValidators)
	router.GET(baseURL+"/validators/total", wrapper.GetValidatorsTotal)
	router.GET(baseURL+"/validators/:address", wrapper.GetValidator)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"d1DWLT71EZXYZb6kh+3/AwAA//9WgNZo6iwAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
